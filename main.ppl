import core

extern fn panic(msg: String)
enum Option<T> {
    None,
    Some(T)
}


fn next()->Option<Int64>{
    return Option.None
}
fn Option<T>.is_some(self)->Bool{
    if const(Option.None = self){
        return false
    }
    return true
}

fn Option<T>.unwrap(self)->T{
    println("Unwrap")
    if const(Option.Some(r) = self){
        return r
    }
    panic("Unwrap None")
}

let a = next()
let b = a.unwrap()
println(b)